<!--
  <h3>Ambulancia</h3>

  Agente que recoge heridos y los lleva al hospital
-->
<agent xmlns="http://jadex.sourceforge.net/jadex" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="ambulanceCaronte" package="jadex.desastres.caronte.ambulance">

	<imports>
		<import>jadex.base.fipa.*</import>
		<import>jadex.bdi.planlib.protocols.request.Request</import>
		<import>jadex.bdi.planlib.df.DF</import>
		<import>jadex.bdi.runtime.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.commons.service.*</import>
		<import>jadex.desastres.*</import>
		<import>java.util.logging.*</import>
	</imports>

	<capabilities>
		<capability name="procap" file="Request"/>
		<capability name="dfcap" file="DF"/>
	</capabilities>

	<beliefs>
		<!-- Creamos el agente como instancia del Entorno. Por defecto, en un hospital de Calasparra -->
		<belief name="env" class="Environment">
			<fact>Environment.getInstance(Environment.AMBULANCIA, $scope.getAgentName(), $beliefbase.hospital)</fact>
		</belief>
		
		<!-- Definimos la posicion del hospital de Calasparra -->
		<belief name="hospital" class="Position">
			<fact>new Position(38.228138, -1.706449)</fact> <!-- Centro de salud, Calasparra -->
		</belief>
		
		<!-- Posicion del agente -->
		<belief name="pos" class="Position">
			<fact>$beliefbase.env.getAgent($scope.getAgentName()).getPosition()</fact>
		</belief>
 		
 		<!-- id de la emergencia que atiendo-->
		<belief name="idEmergencia" class="Integer"> <!-- evaluationmode="dynamic"> -->
			<fact>0</fact>
		</belief>
	</beliefs>

	<goals>
		<achievegoalref name="rp_initiate">
			<concrete ref="procap.rp_initiate"/>
		</achievegoalref>

		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search"/>
		</achievegoalref>

		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_register"/>
		</maintaingoalref>
		<!-- Objetivo para estar en el hospital a menos que haya heridos que recoger.  -->
		<performgoal name="hospital" retry="true" exclude="never"/>
		
		<!-- Objetivo para ir a recoger heridos -->
		<achievegoal name="recogeHeridos"/>
	</goals>

	<plans>
		<!-- Plan para ir al hospital. -->
		<plan name="hospital-plan">
			<body class="HospitalPlan"/>
			<trigger>
				<goal ref="hospital"/>
			</trigger>
		</plan>
		<!-- Plan para ir a recoger heridos. -->
		<plan name="recogeHeridos-plan">
			<body class="RecogeHeridosPlan"/>
			<trigger>
				<messageevent ref="aviso"/>
			</trigger>
		</plan>
	</plans>

	<events>
		<messageevent name="aviso" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>CaronteOntology.ONTOLOGY_NAME</value>
			</parameter>
			<match>$content instanceof Desastre</match>
		</messageevent>
		<messageevent name="ack_aviso" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
	</events>

 	<!-- Inicialmente activamos el objetivo con nombre hospital -->
	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="df_keep_registered">
					<parameter ref="description">
						<value>
							$properties.dfservice.createDFComponentDescription(null,
								$properties.dfservice.createDFServiceDescription("ambulanceCaronte_service", "ambulanceCaronte", "GSI DIT UPM"))
 						</value>
					</parameter>
					<!--<parameter ref="leasetime">
						<value>20000</value>
					</parameter>-->
				</initialgoal>
				<initialgoal ref="hospital"/>
			</goals>
		</configuration>
	</configurations>

	<properties>
		<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(), IDF.class, RequiredServiceInfo.SCOPE_PLATFORM)</property>
	</properties>
</agent>