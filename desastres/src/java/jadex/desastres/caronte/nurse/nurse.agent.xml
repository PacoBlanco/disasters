<!--
  <h3>Enfermero</h3>
-->

<agent xmlns="http://jadex.sourceforge.net/jadex-bdi"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                       http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
       name="nurse"
	   package="jadex.desastres.caronte.nurse">

	<imports>
		<import>jadex.base.fipa.*</import>
		<import>jadex.bdi.planlib.protocols.request.Request</import>
		<import>jadex.bdi.planlib.df.DF</import>
		<import>jadex.bridge.fipa.ComponentIdentifier</import>
		<import>jadex.commons.*</import>
		<import>jadex.commons.service.*</import>
		<import>jadex.util.*</import>
		<import>jadex.runtime.*</import>
		<import>jadex.desastres.*</import>
	</imports>

	<capabilities>
		<capability name="procap" file="Request"/>
		<capability name="dfcap" file="DF"/>
	</capabilities>

	<beliefs>
		<!-- Creamos el agente como instancia del Entorno. Por defecto, en la residencia -->
		<belief name="env" class="Environment">
			<fact>Environment.getInstance(Environment.ENFERMERO, $scope.getAgentName(),$beliefbase.residencia)</fact>
		</belief>
		
		<!-- Definimos la posicion de la residencia -->
		<belief name="residencia" class="Position">
			<fact>new Position(38.232237, -1.699016)</fact>
		</belief>

		<!-- Posicion del agente evaluada dinamicamente->
		<belief name="pos" class="Position" evaluationmode="dynamic">
			<fact>$beliefbase.env.getAgentPosition($scope.getAgentName())</fact>
		</belief-->
		<belief name="agente" class="WorldObject">
			<fact>$beliefbase.env.getAgent($scope.getAgentName())</fact>
		</belief>
		<belief name="pos" class="Position" evaluationmode="dynamic">
			<fact>$beliefbase.agente.getPosition()</fact>
		</belief>
		
		<!-- Indica si el material esta disponible para su uso o hay que reponerlo -->
		<belief name="material" class="boolean">
			<fact>true</fact>
		</belief>
	</beliefs>

	<goals>
		<achievegoalref name="rp_initiate">
			<concrete ref="procap.rp_initiate"/>
		</achievegoalref>
		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search"/>
		</achievegoalref>
		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_keep_registered"/>
		</maintaingoalref>
		
		<performgoal name="vigilarHabitaciones" retry="true" exclude="never"/>
		<achievegoal name="atenderHeridos"/>
		<achievegoal name="reponerMaterial"/>
	</goals>

	<plans>
		<plan name="vigilarHabitaciones-plan">
			<body class="VigilarHabitacionesPlan"/>
			<trigger>
				<goal ref="vigilarHabitaciones"/>
			</trigger>
		</plan>
		<plan name="atenderHeridos-plan">
			<body class="AtenderHeridosPlan"/>
			<trigger>
				<messageevent ref="aviso_geriatrico"/>
			</trigger>
		</plan>
		<plan name="reponerMaterial-plan">
			<body class="ReponerMaterialPlan"/>
			<trigger>
				<goal ref="reponerMaterial"/>
			</trigger>
		</plan>
	</plans>

	<events>
		<messageevent name="aviso_geriatrico" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
		</messageevent>
		<messageevent name="ack_aviso_geriatrico" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>

		<messageevent name="terminado" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
		</messageevent>
		<messageevent name="ack_terminado" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
	</events>

 	<!-- Inicialmente activamos el objetivo con nombre vigilarHabitaciones -->
	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="df_keep_registered">
					<parameter ref="description">
						<value>
							$propertybase.getProperty("dfservice")
								.createDFComponentDescription(null, $propertybase.getProperty("dfservice")
								.createDFServiceDescription("nurse_service", "nurse", "GSI DIT UPM"))
 						</value>
					</parameter>
				</initialgoal>
				<initialgoal ref="vigilarHabitaciones"/>
			</goals>
		</configuration>
	</configurations>

	<properties>
		<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(),IDF.class)</property>
	</properties>
</agent>