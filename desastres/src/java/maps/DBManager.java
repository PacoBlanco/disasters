package maps;

import java.util.*;
import java.net.*;
import java.io.*;

public class DBManager {
    
    public DBManager() {
    }

    /**
     * This method works as an communication interface to the database. It sends
     * the given String as an URL and saves the response generated by the database.
     * @param st - The String to send to the database
     * @return the response returned by the database
     */
    public static String sendToDB(String st) {
        String response= new String();
        try {
            URL url = new URL(st);
            URLConnection workingConnection = url.openConnection();
            String inputLine;
            StringBuffer buff = new StringBuffer();
            BufferedReader dis = new BufferedReader(new InputStreamReader(workingConnection.getInputStream()));
            while ((inputLine = dis.readLine()) != null) {
                buff.append(inputLine);
            }
            response = buff.toString();            
            dis.close();
        } catch (MalformedURLException me) {
            System.out.println("MalformedURLException: " + me);
        } catch (IOException ioe) {
            System.out.println("IOException: " + ioe);
        }
        return response;
    }
    
    /**
     * Reads through a String and extracts the ids present in a response, placed after the "id:" field.
     * @param response - The String containing the response given by REST
     * @return an int array with the indexes of the resources
     */
    private static int[] getIds (String response){
        StringTokenizer stnizer = new StringTokenizer(response);
        int [] ids = new int [100];
        int number = 0;
        String tk = stnizer.nextToken("{");
        while (stnizer.hasMoreElements()){
            tk = stnizer.nextToken("{");
            tk = tk.substring(5,tk.indexOf(','));
            int id = new Integer(tk).intValue();
            ids[number] = id;
            number++;
        }
        for (int i=0; i<number; i++){
            System.out.println(ids[i]);
        }
        return ids;
    }
    
    /**
     * Creates a new event in the database and returns the id the database has
     * assigned to the new event.
     * @return the id given by the database to the new event
     */
    public int createEvent (){
        int id=0;
        
        
        return id;
    }
    
    /**
     * Sends a get request to the database and extracts the number of firemen currently
     * assigned to a certain event
     * @param eventId - The id of the event
     * @return the number of firemen assigned to that event
    
    public static int getNumberOfAssignedFiremen (int eventId) {
        String request = "http://localhost:8084/Disasters/rest/resources/firemen";
        int []ids = getIds(request);
        int number=0;
        //we have the ids of all the firemen in the database
        //then we check how many of them are currently assigned to this event
        for (int i=0; ids[i]!=0; i++){
            if (eventId == getField(ids[i],"idAssigned"))
                number++;
        }
        
        return number;
    }*/
    
    /**
     * Extracts a specified field from an element in the database
     * @param Id - The id of the element in the database
     * @return the value of the specified field for that element
     */
    public static String getField(int Id, String field){
        System.out.println("getField, requested: "+Id + " , "+field);
        String response = sendToDB("http://localhost:8080/Disasters/rest/id/"+Id);
        System.out.println("getField, response.length: "+response.length());
        while (!response.startsWith(field)){
            response=response.substring(1);
        }
        String value = new Double(response.substring(field.length()+2,response.indexOf(','))).toString();
        System.out.println("getField, return: "+value);
        return value;
    }    
}