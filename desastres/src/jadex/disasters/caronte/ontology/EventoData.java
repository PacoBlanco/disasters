/*
 * EventoData.java
 *
 * Generated by Protege plugin Beanynizer. 
 * Changes will be lost! 
 */
package disasters.caronte.ontology;



/**
 *  Java class for concept Evento of caronte ontology.
 */
public abstract class EventoData implements java.beans.BeanInfo 
{
	//-------- constants ----------

	//-------- attributes ----------

	/** Attribute for slot id. */
	protected  int  id;

	/** Attribute for slot descripcion. */
	protected  String  descripcion;

	/** Attribute for slot info. */
	protected  String  info;

	/** Attribute for slot gravedad. */
	protected  String  gravedad;

	/** Attribute for slot posicion. */
	protected  Posicion  posicion;

	//-------- constructors --------

	/**
	 *  Default Constructor. <br>
	 *  Create a new <code>Evento</code>.
	 */
	public EventoData()  {
	}

	//-------- accessor methods --------

	/**
	 *  Get the id of this Evento.
	 * @return id
	 */
	public int  getId() {
		return this.id;
	}

	/**
	 *  Set the id of this Evento.
	 * @param id the value to be set
	 */
	public void  setId(int id) {
		this.id = id;
	}

	/**
	 *  Get the descripcion of this Evento.
	 * @return descripcion
	 */
	public String  getDescripcion() {
		return this.descripcion;
	}

	/**
	 *  Set the descripcion of this Evento.
	 * @param descripcion the value to be set
	 */
	public void  setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}

	/**
	 *  Get the info of this Evento.
	 * @return info
	 */
	public String  getInfo() {
		return this.info;
	}

	/**
	 *  Set the info of this Evento.
	 * @param info the value to be set
	 */
	public void  setInfo(String info) {
		this.info = info;
	}

	/**
	 *  Get the gravedad of this Evento.
	 * @return gravedad
	 */
	public String  getGravedad() {
		return this.gravedad;
	}

	/**
	 *  Set the gravedad of this Evento.
	 * @param gravedad the value to be set
	 */
	public void  setGravedad(String gravedad) {
		this.gravedad = gravedad;
	}

	/**
	 *  Get the posicion of this Evento.
	 * @return posicion
	 */
	public Posicion  getPosicion() {
		return this.posicion;
	}

	/**
	 *  Set the posicion of this Evento.
	 * @param posicion the value to be set
	 */
	public void  setPosicion(Posicion posicion) {
		this.posicion = posicion;
	}

	//-------- bean related methods --------

	/** The property descriptors, constructed on first access. */
	private java.beans.PropertyDescriptor[] pds = null;

	/**
	 *  Get the bean descriptor.
	 *  @return The bean descriptor.
	 */
	public java.beans.BeanDescriptor getBeanDescriptor() {
		return null;
	}

	/**
	 *  Get the property descriptors.
	 *  @return The property descriptors.
	 */
	public java.beans.PropertyDescriptor[] getPropertyDescriptors() {
		if(pds==null) {
			try {
				pds = new java.beans.PropertyDescriptor[]{
					 new java.beans.PropertyDescriptor("id", this.getClass(), "getId", "setId")
					, new java.beans.PropertyDescriptor("descripcion", this.getClass(), "getDescripcion", "setDescripcion")
					, new java.beans.PropertyDescriptor("info", this.getClass(), "getInfo", "setInfo")
					, new java.beans.PropertyDescriptor("gravedad", this.getClass(), "getGravedad", "setGravedad")
					, new java.beans.PropertyDescriptor("posicion", this.getClass(), "getPosicion", "setPosicion")
				};
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		return pds;
	}

	/**
	 *  Get the default property index.
	 *  @return The property index.
	 */
	public int getDefaultPropertyIndex() {
		return -1;
	}

	/**
	 *  Get the event set descriptors.
	 *  @return The event set descriptors.
	 */
	public java.beans.EventSetDescriptor[] getEventSetDescriptors() {
		return null;
	}

	/**
	 *  Get the default event index.
	 *  @return The default event index.
	 */
	public int getDefaultEventIndex() {
		return -1;
	}

	/**
	 *  Get the method descriptors.
	 *  @return The method descriptors.
	 */
	public java.beans.MethodDescriptor[] getMethodDescriptors() {
		return null;
	}

	/**
	 *  Get additional bean info.
	 *  @return Get additional bean info.
	 */
	public java.beans.BeanInfo[] getAdditionalBeanInfo() {
		return null;
	}

	/**
	 *  Get the icon.
	 *  @return The icon.
	 */
	public java.awt.Image getIcon(int iconKind) {
		return null;
	}

	/**
	 *  Load the image.
	 *  @return The image.
	 */
	public java.awt.Image loadImage(final String resourceName) {
		try {
			final Class c = getClass();
			java.awt.image.ImageProducer ip = (java.awt.image.ImageProducer)
				java.security.AccessController.doPrivileged(new java.security.PrivilegedAction() {
					public Object run(){
						java.net.URL url;
						if((url = c.getResource(resourceName))==null) {
							return null;
						}
						else {
							try {
								return url.getContent();
							}
							catch(java.io.IOException ioe) {
								return null;
							}
						}
					}
				});
			if(ip==null)
				return null;
			java.awt.Toolkit tk = java.awt.Toolkit.getDefaultToolkit();
			return tk.createImage(ip);
		}
		catch(Exception ex) {
			return null;
		}
	}

	//-------- additional methods --------

	/**
	 *  Get a string representation of this Evento.
	 *  @return The string representation.
	 */
	public String toString() {
		return "Evento("
           + ")";
	}

}
