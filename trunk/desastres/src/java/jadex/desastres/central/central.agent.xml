<!--
  <h3>Central</h3>

  Agente que recoge heridos y los lleva al hospital
-->

<agent xmlns="http://jadex.sourceforge.net/jadex-bdi"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                       http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
       name="central"
	   package="jadex.desastres.central">

	<imports>
		<import>jadex.desastres.*</import>
		<import>jadex.runtime.*</import>
		<import>jadex.util.*</import>
		<import>jadex.*</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.bridge.fipa.ComponentIdentifier</import>
		<import>java.util.logging.*</import>
		<import>jadex.bdi.planlib.protocols.request.Request</import>
		<import>jadex.bdi.planlib.df.DF</import>
		<import>jadex.commons.*</import>
		<import>jadex.commons.service.*</import>
	</imports>

	<capabilities>
		<capability name="procap" file="Request"/>
		<capability name="dfcap" file="DF"/>
	</capabilities>

	<beliefs>
		<!-- Creamos el agente como instancia del Entorno. Por defecto, una posicion en el centro de Madrid -->
		<belief name="env" class="Environment">
			<fact>Environment.getInstance(Environment.CENTRAL,$scope.getAgentName(),$beliefbase.centralMadrid)</fact>
		</belief>
		
		<!-- Definimos la posicion de la central en Madrid -->
		<belief name="centralMadrid" class="Position">
			<fact>new Position(40.45, -3.70)</fact> <!-- Posicion aleatoria de la central -->
		</belief>
		
		<!-- Poscion del agente evaluada dinamicamente-->
		<belief name="pos" class="Position" evaluationmode="dynamic">
			<fact>$beliefbase.env.getAgentPosition($scope.getAgentName())</fact>
		</belief>
 		
 		<!-- id del desastre que tienen que atender-->
		<belief name="desastreActual" class="Integer"> <!-- evaluationmode="dynamic" -->
			<fact>0</fact>
		</belief>
	</beliefs>

	<goals>
		<achievegoalref name="rp_initiate">
			<concrete ref="procap.rp_initiate"/>
		</achievegoalref>
		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search"/>
		</achievegoalref>
		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_keep_registered"/>
		</maintaingoalref>
		
		<!-- Objetivo para buscar desastres a menos que se este tratando uno -->
		<performgoal name="buscaDesastre"/> <!-- retry="true" exclude="never"/> -->
		
		<!-- Objetivo para esperar a la finalizacion de un desastre -->
		<achievegoal name="esperaSolucion"/>

		<achievegoal name="volverABuscar"/>
	</goals>

	<plans>
		<!-- Plan para buscar desastres. -->
		<plan name="buscaDesastre-plan">
			<body class="BuscaDesastrePlan"/>
			<trigger>
				<goal ref="buscaDesastre"/>
			</trigger>
		</plan>

		<!-- Plan para esperar la solucion del Desastre. -->
		<plan name="esperaSolucion-plan">
			<body class="EsperaSolucionPlan"/>
			<trigger>
				<goal ref="esperaSolucion"/>
			</trigger>
		</plan>

		<plan name="volverABuscar-plan">
			<body class="VolverABuscarPlan"/>
			<trigger>
				<messageevent ref="terminado"/>
			</trigger>
		</plan>
	</plans>

	<events>
		<messageevent name="aviso" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
		</messageevent>
		<messageevent name="ack_aviso" direction="recieve" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>

		<messageevent name="terminado" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
		</messageevent>
		<messageevent name="ack_terminado" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
	</events>

 	<!-- Inicialmente activamos el objetivo con nombre hospital -->
	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="df_keep_registered">
					<parameter ref="description">
						<value>
							$propertybase.getProperty("dfservice")
								.createDFComponentDescription(null, $propertybase.getProperty("dfservice")
								.createDFServiceDescription("central_service", "central", "GSI DIT UPM"))
 						</value>
					</parameter>
					<!--<parameter ref="leasetime">
						<value>20000</value>
					</parameter>-->
				</initialgoal>
				<initialgoal ref="buscaDesastre"/>
			</goals>
		</configuration>
	</configurations>

	<properties>
		<!--<property name="logging.level">Level.INFO</property>
		<property name="logging.useParentHandlers">true</property>-->
		<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(),IDF.class)</property>
	</properties>
</agent>
