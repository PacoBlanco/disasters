<!--
  <h3>Bombero</h3>

  Agente que acude a cualquier desastre para ayudar a solucionarlo
-->
<agent xmlns="http://jadex.sourceforge.net/jadex" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="firemen" package="disasters.desastres.firemen">

	<imports>
		<import>disasters.Position</import>
		<import>disasters.desastres.Environment</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.bdi.planlib.df.DF</import>
		<import>jadex.bdi.planlib.protocols.request.Request</import>
		<import>jadex.bdi.runtime.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.commons.*</import>
		<import>java.util.logging.*</import>
	</imports>

	<capabilities>
		<capability name="procap" file="Request"/>
		<capability name="dfcap" file="DF"/>
	</capabilities>

	<beliefs>
		<!-- Creamos el agente como instancia del Entorno. Por defecto, en el centro de Madrid -->
		<belief name="env" class="Environment">
			<fact>Environment.getInstance(Environment.BOMBERO, $scope.getAgentName(), $beliefbase.parqueDeBomberos)</fact>
		</belief>
		
		<!-- Definimos la posicion de la Estacion de bomberos de Madrid -->
		<belief name="parqueDeBomberos" class="Position">
			<fact>new Position(40.414691, -3.706996)</fact>
		</belief>
		
		<!-- Posicion del agente evaluada dinamicamente -->
		<belief name="pos" class="Position">
			<fact>$beliefbase.env.getAgent($scope.getAgentName()).getPosition()</fact>
		</belief>
 		
 		<!-- id del herido atrapado si lo hay-->
		<!--<belief name="idAtrapado" class="Integer" evaluationmode="dynamic">
			<fact>$beliefbase.env.getAgentPosition($scope.getAgentName())</fact>
		</belief>-->
 		
 		<!-- desastre que esta atendiendo-->
		<!--belief name="desastreActual" class="Integer" evaluationmode="dynamic">
			<fact>$beliefbase.env.getAgentPosition($scope.getAgentName())</fact>
		</belief-->
		<!--belief name="assignedId" class="Integer" evaluationmode="dynamic">
			<fact>1</fact>
		</belief-->
	</beliefs>

	<goals>
		<achievegoalref name="rp_initiate">
			<concrete ref="procap.rp_initiate"/>
		</achievegoalref>

		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search"/>
		</achievegoalref>

		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_register"/>
		</maintaingoalref>

		<!-- Objetivo para estar en la estacion de bomberos a menos que haya ocurrido algun desastre.  -->
		<performgoal name="estacionBomberos" retry="true" exclude="never"/>
		
		<!-- Objetivo para socorrer algun desastre que haya ocurrido -->
		<achievegoal name="bomberoEnDesastre"/>
	</goals>

	<plans>
		<!-- Plan para ir a la estacion de bomberos a menos que haya ocurrido algun desastre. -->
		<plan name="estacionBomberos-plan">
			<body class="EstacionBomberosPlan"/>
			<trigger>
				<goal ref="estacionBomberos"/>
			</trigger>
		</plan>
		<!-- Plan para ir a socorrer algun desastre que haya ocurrido. -->
		<plan name="bomberoEnDesastre-plan">
			<body class="BomberoEnDesastrePlan"/>
			<trigger>
				<messageevent ref="aviso"/>
			</trigger>
		</plan>
	</plans>

	<events>
		<messageevent name="aviso" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
		</messageevent>
		<messageevent name="ack_aviso" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>

		<messageevent name="terminado" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
		</messageevent>
		<messageevent name="ack_terminado" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
	</events>

 	<!-- Inicialmente activamos el objetivo con nombre estacionBomberos -->
	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="df_keep_registered">
					<parameter ref="description">
						<value>
							$properties.dfservice.createDFComponentDescription(null,
								$properties.dfservice.createDFServiceDescription("firemen_service", "firemen", "GSI DIT UPM"))
 						</value>
					</parameter>
					<!--<parameter ref="leasetime">
						<value>20000</value>
					</parameter>-->
				</initialgoal>
				<initialgoal ref="estacionBomberos"/>
			</goals>
			<!--<plans>
				<initialplan ref="estacionBomberos-plan"/>
			</plans>-->
		</configuration>
	</configurations>

	<properties>
		<!--<property name="logging.level">Level.INFO</property>
		<property name="logging.useParentHandlers">true</property>-->
		<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(), IDF.class, RequiredServiceInfo.SCOPE_PLATFORM)</property>
	</properties>
</agent>